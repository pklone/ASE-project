services:
  caddy:
    image: caddy:latest
    container_name: caddy_gateway
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - player_service
      - authentication_service
      - gacha_service
      - account_service
      - currency_service
      - market_service
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - internal_net
    
  player_db:
    build: ./dbs/player
    container_name: player_db
    ports:
      - "127.0.0.1:5432:5432"
    env_file:
      - path: ./dbs/player/.env
    volumes:
      - player_db:/var/lib/postgresql/data
      - ./dbs/player/server.crt:/src/dbs/player/server.crt
      - ./dbs/player/server.key:/src/dbs/player/server.key
    command: -c ssl=on -c ssl_cert_file=/src/dbs/player/server.crt -c ssl_key_file=/src/dbs/player/server.key
    networks:
      - player_net

  admin_db:
    build: ./dbs/admin
    container_name: admin_db
    ports:
      - "127.0.0.1:5433:5432"
    env_file:
      - path: ./dbs/admin/.env
    volumes:
      - admin_db:/var/lib/postgresql/data
      - ./dbs/admin/server.crt:/src/dbs/admin/server.crt
      - ./dbs/admin/server.key:/src/dbs/admin/server.key
    command: -c ssl=on -c ssl_cert_file=/src/dbs/admin/server.crt -c ssl_key_file=/src/dbs/admin/server.key
    networks:
      - authentication_net

  gacha_db:
    build: ./dbs/gacha/
    container_name: gacha_db
    ports:
      - "127.0.0.1:5434:5432"
    env_file:
      - path: ./dbs/gacha/.env
    volumes:
      - gacha_db:/var/lib/postgresql/data
      - ./dbs/gacha/server.crt:/src/dbs/gacha/server.crt
      - ./dbs/gacha/server.key:/src/dbs/gacha/server.key
    command: -c ssl=on -c ssl_cert_file=/src/dbs/gacha/server.crt -c ssl_key_file=/src/dbs/gacha/server.key
    networks:
      - gacha_net

  market_db:
    build: ./dbs/market/
    container_name: market_db
    ports:
      - "127.0.0.1:5436:5432"
    env_file:
      - path: ./dbs/market/.env
    volumes:
      - market_db:/var/lib/postgresql/data
      - ./dbs/market/server.crt:/src/dbs/market/server.crt
      - ./dbs/market/server.key:/src/dbs/market/server.key
    command: -c ssl=on -c ssl_cert_file=/src/dbs/market/server.crt -c ssl_key_file=/src/dbs/market/server.key
    networks:
      - market_net

  transaction_db:
    build: ./dbs/transaction
    container_name: transaction_db
    ports:
      - "127.0.0.1:5437:5432"
    env_file:
      - path: ./dbs/transaction/.env
    volumes:
      - transaction_db:/var/lib/postgresql/data
      - ./dbs/transaction/server.crt:/src/dbs/transaction/server.crt
      - ./dbs/transaction/server.key:/src/dbs/transaction/server.key
    command: -c ssl=on -c ssl_cert_file=/src/dbs/transaction/server.crt -c ssl_key_file=/src/dbs/transaction/server.key
    networks:
      - transaction_net

 
  player_service:
    build: ./services/player
    container_name: player_service
    env_file:
      - path: ./services/player/.env
    ports:
      - "127.0.0.1:8080:5000"
    depends_on:
      - player_db
    networks:
      - player_net
      - internal_net
    secrets:
      - player_certificate
      - player_key
    develop:
     watch:
      - action: sync
        path: ./services/player/src
        target: /app
      - action: rebuild
        path: ./services/player/requirements.txt

  authentication_service:
    build: ./services/authentication
    container_name: authentication_service
    env_file:
      - path: ./services/authentication/.env
    ports:
      - "127.0.0.1:8081:5000"
    depends_on:
      - admin_db
    networks:
      - authentication_net
      - internal_net
    secrets:
      - authentication_certificate
      - authentication_key
    develop:
     watch:
      - action: sync
        path: ./services/authentication/src
        target: /app
      - action: rebuild
        path: ./services/authentication/requirements.txt

  gacha_service:
    build: ./services/gacha
    container_name: gacha_service
    env_file:
      - path: ./services/gacha/.env
    ports:
      - "127.0.0.1:8082:5000"
    depends_on:
      - gacha_db
    networks:
      - gacha_net
      - internal_net
    secrets:
      - collection_certificate
      - collection_key
    develop:
     watch:
      - action: sync
        path: ./services/gacha/src
        target: /app
      - action: rebuild
        path: ./services/gacha/requirements.txt

  account_service:
    build: ./services/account
    container_name: account_service
    env_file:
      - path: ./services/account/.env
    ports:
      - "127.0.0.1:8083:5000"
    networks:
      - internal_net
    secrets:
      - account_certificate
      - account_key
    develop:
     watch:
      - action: sync
        path: ./services/account/src
        target: /app
      - action: rebuild
        path: ./services/account/requirements.txt

  currency_service:
    build: ./services/currency
    container_name: currency_service
    env_file:
      - path: ./services/currency/.env
    ports:
      - "127.0.0.1:8084:5000"
    networks:
      - internal_net
    secrets:
      - currency_certificate
      - currency_key
    develop:
     watch:
      - action: sync
        path: ./services/currency/src
        target: /app
      - action: rebuild
        path: ./services/currency/requirements.txt

  admin_service:
    build: ./services/admin
    container_name: admin_service
    env_file:
      - path: ./services/admin/.env
    ports:
      - "127.0.0.1:8085:5000"
    networks:
      - internal_net
    secrets:
      - admin_certificate
      - admin_key
    develop:
      watch:
        - action: sync
          path: ./services/admin/src
          target: /app
        - action: rebuild
          path: ./services/admin/requirements.txt

  market_service:
    build: ./services/market
    container_name: market_service
    env_file:
      - path: ./services/market/.env
    ports:
      - "127.0.0.1:8086:5000"
    depends_on:
      - market_db
      - rabbitmq_broker
    networks:
      - market_net
      - internal_net
    secrets:
      - market_certificate
      - market_key
      - celery_certificate
      - celery_key
    develop:
      watch:
        - action: sync
          path: ./services/market/src
          target: /app
        - action: rebuild
          path: ./services/market/requirements.txt

  transaction_service:
    build: ./services/transaction
    container_name: transaction_service
    env_file:
      - path: ./services/transaction/.env
    ports:
      - "127.0.0.1:8087:5000"
    depends_on:
      - transaction_db
    networks:
      - transaction_net
      - internal_net
    secrets:
      - transaction_certificate
      - transaction_key
    develop:
     watch:
      - action: sync
        path: ./services/transaction/src
        target: /app
      - action: rebuild
        path: ./services/transaction/requirements.txt
    

  rabbitmq_broker:
    hostname: rabbitmq_broker
    build: ./services/rabbitmq
    container_name: rabbitmq_broker
    ports:
     - "127.0.0.1:5671:5671"
     - "127.0.0.1:15672:15672"
    networks:
     - internal_net
    secrets:
      - rabbit_certificate
      - rabbit_key
    healthcheck:
      test: curl guest:guest@127.0.0.1:15672/api/overview || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s

  celery_worker_1:
    hostname: celery_worker_1
    build: ./services/celery
    links:
     - rabbitmq_broker
    networks:
     - internal_net
    secrets:
      - celery_certificate
      - celery_key
    depends_on:
      rabbitmq_broker:
        condition: service_healthy
    healthcheck:
      test: celery -A mycelery inspect ping -d celery@$${HOSTNAME} || exit 1
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 15s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      
  celery_worker_2:
    hostname: celery_worker_2
    build: ./services/celery
    links:
     - rabbitmq_broker
    networks:
     - internal_net
    secrets:
      - celery_certificate
      - celery_key
    depends_on:
      rabbitmq_broker:
        condition: service_healthy
    healthcheck:
      test: celery -A mycelery inspect ping -d celery@$${HOSTNAME} || exit 1
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 15s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
    
secrets:
  account_certificate:
    file: ./cert/account_cert.pem
  account_key:
    file: ./cert/account_key.pem
  admin_certificate:    
    file: ./cert/admin_cert.pem
  admin_key:
    file: ./cert/admin_key.pem
  collection_certificate:
    file: ./cert/collection_cert.pem
  collection_key:
    file: ./cert/collection_key.pem
  currency_certificate:
    file: ./cert/currency_cert.pem
  currency_key:
    file: ./cert/currency_key.pem
  authentication_certificate:
    file: ./cert/authentication_cert.pem
  authentication_key: 
    file: ./cert/authentication_key.pem
  market_certificate:
    file: ./cert/market_cert.pem  
  market_key: 
    file: ./cert/market_key.pem 
  player_certificate:
    file: ./cert/player_cert.pem
  player_key: 
    file: ./cert/player_key.pem
  transaction_certificate:
    file: ./cert/transaction_cert.pem
  transaction_key:
    file: ./cert/transaction_key.pem
  celery_certificate:
    file: ./cert/celery_cert.pem
  celery_key:
    file: ./cert/celery_key.pem
  rabbit_certificate:
    file: ./cert/rabbit_cert.pem
  rabbit_key:
    file: ./cert/rabbit_key.pem
  

volumes:
 player_db:
 admin_db:
 gacha_db:
 market_db:
 transaction_db:
 caddy_data:
 caddy_config:

networks:
 player_net:
 authentication_net:
 gacha_net:
 market_net:
 transaction_net:
 internal_net: