openapi: 3.0.0
info:
  title: EzGacha
  version: 1.0.0
  description: API to manage accounts, collections, currencies, and market functionalities for a players and admins

servers:
  - url: https://localhost:8080
    description: Player API

tags:
  - name: Player
    description: Operations related to Player DB manager

paths:
  /:
    get:
      summary: Get all players list
      operationId: show_all
      tags:
        - Player
      responses:
        "200":
          description: players without password hash
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserProfile"
    post:
      summary: Create a new player
      operationId: create_player
      tags:
        - Player
      requestBody:
       description: player details for creation 
       content:
         application/json:
           schema:
             type: object
             properties:
               username:
                 type: string
               password:
                 type: string
      responses:
        "201":
          description: player profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserProfile"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
              example:
                response: "Missing or invalid Data"

  /uuid/{player_uuid}:
    get:
      summary: Show player by uuid
      operationId: show_by_uuid
      tags:
        - Player
      parameters:
        - name: player_uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: player uuid is correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/UserProfile"
        "400":
          description: player uuid is not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
              examples:
                incorrect_uuid:
                  value:
                    response: "Error: player not found"
    put:
      summary: Modify player account by uuid
      tags:
        - Player
      requestBody:
        description: Account details for creation
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                wallet:
                  type: number
      responses:
        "200":
          description: Player modification
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
              example:
                response: "User updated Successfully!"

        "400":
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
              examples:
                not_found:
                  value:
                    response: "Error: player not found"
                invalid_wallet:
                  value:
                    response: "Invalid wallet"
    delete:
     tags:
       - Player
     summary: delete a specific user account
     operationId: user_delete
     parameters:
       - name: player_uuid
         in: path
         required: true
         schema:
           type: string
     responses:
       '200':
         description: User profile updated
         content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
              example:
                response: "User eliminated succesfully!"

  /username/{player_username}/all:
    get:
      summary: Show player by username with password hashed
      operationId: show_by_username_passw
      tags:
        - Player
      parameters:
        - name: player_username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: players with password hash
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserProfileWithPassHash"
        "400":
          description: player uuid is not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
              examples:
                incorrect_uuid:
                  value:
                    response: "Error: player not found"
    
  /username/{player_username}:
    get:
      summary: Show player by username
      operationId: show_by_username
      tags:
        - Player
      parameters:
        - name: player_username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: players 
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserProfile"
        "400":
          description: player uuid is not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
              examples:
                incorrect_uuid:
                  value:
                    response: "Error: player not found"
    
  /{player_uuid}/wallet:
    put:
     tags:
       - Player
     summary: Updates wallet of a specific player
     operationId: user_modify
     parameters:
       - name: player_uuid
         in: path
         required: true
         schema:
           type: string
     requestBody:
        description: update wallet 
        content:
          application/json:
            schema:
              type: object
              properties:
                wallet:
                  type: number
     responses:
       '200':
         description: User profile updated
         content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
              example:
                response: "wallet updated Successfully!"
       "400":
          description: player uuid is not correct
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
              examples:
                incorrect_uuid:
                  value:
                    response: "Error: player not found"
                invalid_wallet:
                  value:
                    response: "Invalid wallet"


components:
  schemas:
    UserProfile:
      type: object
      description: Player of the game
      properties:
        uuid:
          type: string
          description: Unique identifier of the User
        username:
          type: string
          description: Unique nickname of the User
        wallet:
          type: number
          description: In game currency of the User (default 0)
    UserProfileWithPassHash:
      type: object
      description: Player of the game
      properties:
        uuid:
          type: string
          description: Unique identifier of the User
        username:
          type: string
          description: Unique nickname of the User
        password_hash:
          type: string
          description: Hashed password of the User
        wallet:
          type: number
          description: In game currency of the User (default 0)
        
        
