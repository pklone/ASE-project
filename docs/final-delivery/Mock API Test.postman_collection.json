{
	"info": {
		"_postman_id": "c8a7b4b4-339a-4ed8-b127-ed8a6e3abe3e",
		"name": "Mock API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39769890",
		"_collection_link": "https://ezgacha.postman.co/workspace/EzGacha~c529a623-48e8-4a0b-83fa-7bbaf1202ee7/collection/39769890-c8a7b4b4-339a-4ed8-b127-ed8a6e3abe3e?action=share&source=collection_link&creator=39769890"
	},
	"item": [
		{
			"name": "Generate token",
			"item": [
				{
					"name": "Script to generate token player",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function base64UrlEncode(str) {",
									"    return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(str))",
									"        .replace(/=/g, '')   // Remove padding",
									"        .replace(/\\+/g, '-') // Replace + with -",
									"        .replace(/\\//g, '_'); // Replace / with _",
									"}",
									"",
									"function hmacSHA256(baseString, secret) {",
									"    return CryptoJS.HmacSHA256(baseString, secret).toString(CryptoJS.enc.Base64)",
									"        .replace(/=/g, '')   // Remove padding",
									"        .replace(/\\+/g, '-') // Replace + with -",
									"        .replace(/\\//g, '_'); // Replace / with _",
									"}",
									"",
									"// JWT Header",
									"const header = {",
									"    alg: \"HS256\",",
									"    typ: \"JWT\"",
									"};",
									"",
									"// JWT Payload",
									"const payload = {",
									"    sub: \"4d8ecfb4-c58f-4a9b-9f35-f28ee49834ef\", ",
									"    scope: \"player\", ",
									"    iss: \"https://localhost\",",
									"    exp: Math.floor(Date.now() / 1000) + (365 * 24 * 60 * 60) // Expiry set to 1 year",
									"};",
									"",
									"// Secret key",
									"const secret = \"secret\";",
									"",
									"// Base64 URL encode the header and payload",
									"const encodedHeader = base64UrlEncode(JSON.stringify(header));",
									"const encodedPayload = base64UrlEncode(JSON.stringify(payload));",
									"",
									"// Create the signature",
									"const signature = hmacSHA256(`${encodedHeader}.${encodedPayload}`, secret);",
									"",
									"// Construct the JWT",
									"const token = `${encodedHeader}.${encodedPayload}.${signature}`;",
									"",
									"// Save the token as a global variable",
									"pm.globals.set(\"mock_oauth2_token\", token);",
									"",
									"// Log the generated token",
									"console.log(\"Generated JWT:\", token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://localhost/login",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Script to generate token player \"test\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function base64UrlEncode(str) {",
									"    return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(str))",
									"        .replace(/=/g, '')   // Remove padding",
									"        .replace(/\\+/g, '-') // Replace + with -",
									"        .replace(/\\//g, '_'); // Replace / with _",
									"}",
									"",
									"function hmacSHA256(baseString, secret) {",
									"    return CryptoJS.HmacSHA256(baseString, secret).toString(CryptoJS.enc.Base64)",
									"        .replace(/=/g, '')   // Remove padding",
									"        .replace(/\\+/g, '-') // Replace + with -",
									"        .replace(/\\//g, '_'); // Replace / with _",
									"}",
									"",
									"// JWT Header",
									"const header = {",
									"    alg: \"HS256\",",
									"    typ: \"JWT\"",
									"};",
									"",
									"// JWT Payload",
									"const payload = {",
									"    sub: \"71520f05-80c5-4cb1-b05a-a9642f9ae44d\", ",
									"    scope: \"player\", ",
									"    iss: \"https://localhost\",",
									"    exp: Math.floor(Date.now() / 1000) + (365 * 24 * 60 * 60) // Expiry set to 1 year",
									"};",
									"",
									"// Secret key",
									"const secret = \"secret\";",
									"",
									"// Base64 URL encode the header and payload",
									"const encodedHeader = base64UrlEncode(JSON.stringify(header));",
									"const encodedPayload = base64UrlEncode(JSON.stringify(payload));",
									"",
									"// Create the signature",
									"const signature = hmacSHA256(`${encodedHeader}.${encodedPayload}`, secret);",
									"",
									"// Construct the JWT",
									"const token = `${encodedHeader}.${encodedPayload}.${signature}`;",
									"",
									"// Save the token as a global variable",
									"pm.globals.set(\"mock_oauth2_token_test\", token);",
									"",
									"// Log the generated token",
									"console.log(\"Generated JWT:\", token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://localhost/login",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Script to generate token admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function base64UrlEncode(str) {",
									"    return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(str))",
									"        .replace(/=/g, '')   // Remove padding",
									"        .replace(/\\+/g, '-') // Replace + with -",
									"        .replace(/\\//g, '_'); // Replace / with _",
									"}",
									"",
									"function hmacSHA256(baseString, secret) {",
									"    return CryptoJS.HmacSHA256(baseString, secret).toString(CryptoJS.enc.Base64)",
									"        .replace(/=/g, '')   // Remove padding",
									"        .replace(/\\+/g, '-') // Replace + with -",
									"        .replace(/\\//g, '_'); // Replace / with _",
									"}",
									"",
									"// JWT Header",
									"const header = {",
									"    alg: \"HS256\",",
									"    typ: \"JWT\"",
									"};",
									"",
									"// JWT Payload",
									"const payload = {",
									"    sub: \"4d8ecfb4-c58f-4a9b-9f35-f28ee49834ef\", ",
									"    scope: \"admin\", ",
									"    iss: \"https://localhost\",",
									"    exp: Math.floor(Date.now() / 1000) + (365 * 24 * 60 * 60) // Expiry set to 1 year",
									"};",
									"",
									"// Secret key",
									"const secret = \"secret\";",
									"",
									"// Base64 URL encode the header and payload",
									"const encodedHeader = base64UrlEncode(JSON.stringify(header));",
									"const encodedPayload = base64UrlEncode(JSON.stringify(payload));",
									"",
									"// Create the signature",
									"const signature = hmacSHA256(`${encodedHeader}.${encodedPayload}`, secret);",
									"",
									"// Construct the JWT",
									"const token = `${encodedHeader}.${encodedPayload}.${signature}`;",
									"",
									"// Save the token as a global variable",
									"pm.globals.set(\"mock_oauth2_token_admin\", token);",
									"",
									"// Log the generated token",
									"console.log(\"Generated JWT:\", token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://localhost/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Collection",
			"item": [
				{
					"name": "/collection (Get all collections)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://127.0.0.1:8082/collection",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/:gacha_uuid (Get collection by UUID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.property(\"description\");",
									"    pm.expect(response).to.have.property(\"image_path\");",
									"    pm.expect(response.name).to.equal(\"name\");",
									"    pm.expect(response.rarity).to.equal(\"Common\");",
									"    pm.expect(response.uuid).to.equal(\"a0f0f673-595d-445f-bbf5-be68217f5dab\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8082/collection/:gacha_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "a0f0f673-595d-445f-bbf5-be68217f5dab"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/:gacha_uuid (Gacha uuid does is not valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verify response error\", function () {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"Invalid gacha_uuid\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8082/collection/:gacha_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "a0f0f673-595d-445f-bbf5-be68217f5da"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/:gacha_uuid (Gacha does not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verify response error\", function () {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"Error: gacha not found\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8082/collection/:gacha_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "a0f0f673-595d-445f-bbf5-be68217f5dac"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/user/:player_uuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response[0]).to.have.property(\"description\");",
									"    pm.expect(response[0]).to.have.property(\"image_path\");",
									"    pm.expect(response[0]).to.have.property(\"name\");",
									"    pm.expect(response[0].rarity).to.equal(\"Common\");",
									"    pm.expect(response[0].quantity).to.equal(2);",
									"    pm.expect(response[0].uuid).to.equal(\"a0f0f673-595d-445f-bbf5-be68217f5dab\");",
									"    pm.expect(response[1].uuid).to.equal(\"c685eae6-a473-4bca-a5c8-b710bb495ca6\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8082/collection/user/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection",
								"user",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "4d8ecfb4-c58f-4a9b-9f35-f28ee49834ef"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/user/:player_uuid Quantity update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.equal(\"success\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gacha_uuid\": \"a0f0f673-595d-445f-bbf5-be68217f5dab\",\n    \"q\" : 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8082/collection/user/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection",
								"user",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "4d8ecfb4-c58f-4a9b-9f35-f28ee49834ef"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/user/:player_uuid Quantity update that adds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.equal(\"success\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gacha_uuid\": \"5721633c-0d52-4742-8aeb-7f0375be39fb\",\n    \"q\" : 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8082/collection/user/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection",
								"user",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "4d8ecfb4-c58f-4a9b-9f35-f28ee49834ef"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/user/:player_uuid Quantity update failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.equal(\"Error: gacha not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"gacha_uuid\": \"a0f0f673-595d-445f-bbf5-be6825dab\",\n    \"q\" : 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8082/collection/user/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection",
								"user",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "4d8ecfb4-c58f-4a9b-9f35-f28ee49834ef"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/roll (Successful roll with valid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// Parse the response body",
									"const responseBody = pm.response.json();",
									"",
									"// Check if the response contains the \"response\" key",
									"pm.test(\"Response contains 'response' key\", function () {",
									"    pm.expect(responseBody).to.have.property(\"response\");",
									"});",
									"",
									"// Check if the \"response\" object has exactly 5 fields",
									"pm.test(\"Response object contains 5 fields\", function () {",
									"    pm.expect(Object.keys(responseBody.response)).to.have.lengthOf(6);",
									"});",
									"",
									"// Optionally, you can check the names of the fields if necessary",
									"pm.test(\"Response object contains the expected fields\", function () {",
									"    const expectedFields = [\"active\", \"description\", \"image_path\", \"name\", \"rarity\", \"uuid\"];",
									"    pm.expect(Object.keys(responseBody.response)).to.deep.equal(expectedFields);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "body",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "password_credentials",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://ase.localhost/login",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "access_token",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "username",
									"value": "test",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://127.0.0.1:8082/roll",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection (Add a gacha)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response.description).to.equal(\"placeholder\");",
									"    pm.expect(response.image_path).to.equal(\"/assets/images/gachas/400.png\");",
									"    pm.expect(response.name).to.equal(\"placeholder\");",
									"    pm.expect(response).to.have.property(\"rarity\");",
									"    pm.expect(response).to.have.property(\"uuid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_image",
									"type": "file",
									"src": "postman-cloud:///1efa80f2-a355-49d0-aad3-98f5270374ce"
								},
								{
									"key": "name",
									"value": "placeholder",
									"type": "text"
								},
								{
									"key": "description",
									"value": "placeholder",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "C",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://127.0.0.1:8082/collection",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection (Gacha already exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"Error: gacha already exists\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_image",
									"type": "file",
									"src": "postman-cloud:///1efa80f2-a355-49d0-aad3-98f5270374ce"
								},
								{
									"key": "name",
									"value": "placeholder",
									"type": "text"
								},
								{
									"key": "description",
									"value": "placeholder",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "C",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://127.0.0.1:8082/collection",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/:gacha_uuid (Modify a existing gacha)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response.description).to.equal(\"modified_description\");",
									"    pm.expect(response.image_path).to.equal(\"/assets/images/gachas/400.png\");",
									"    pm.expect(response.name).to.equal(\"modified_name\");",
									"    pm.expect(response.rarity.name).to.equal(\"Common\");",
									"    pm.expect(response).to.have.property(\"uuid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_image",
									"type": "file",
									"src": "postman-cloud:///1efa80f2-a355-49d0-aad3-98f5270374ce"
								},
								{
									"key": "name",
									"value": "modified_name",
									"type": "text"
								},
								{
									"key": "description",
									"value": "modified_description",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "C",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://127.0.0.1:8082/collection/:gacha_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "c685eae6-a473-4bca-a5c8-b710bb495ca6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/<gacha_uuid> (Eliminate a gacha)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"Gacha deleted\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8082/collection/:gacha_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8082",
							"path": [
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "5721633c-0d52-4742-8aeb-7f0375be39fb"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Player",
			"item": [
				{
					"name": "/ (Get players)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8080/",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/uuid/<player_uuid> (Get player by uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.property(\"active\");",
									"    pm.expect(response).to.have.property(\"username\");",
									"    pm.expect(response).to.have.property(\"wallet\");",
									"    pm.expect(response.uuid).to.equal(\"71520f05-80c5-4cb1-b05a-a9642f9ae44d\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8080/uuid/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"uuid",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/uuid/<player_uuid> (Get player by uuid error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"Error: player not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8080/uuid/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"uuid",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/uuid/<player_uuid> (Get player by uuid invalid uuid))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"Invalid player_uuid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8080/uuid/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"uuid",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/uuid/<player_uuid> (Modify player by uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"User updated Successfully!\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"new name\",\n    \"wallet\": 500\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8080/uuid/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"uuid",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae111"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/uuid/<player_uuid> (Modify player by uuid wallet negative))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"Invalid wallet\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"new name\",\n    \"wallet\": -50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8080/uuid/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"uuid",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/username/<player_username> (Get player by username)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.property(\"active\");",
									"    pm.expect(response.username).to.eql(\"test\");",
									"    pm.expect(response).to.have.property(\"wallet\");",
									"    pm.expect(response).to.have.property(\"uuid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8080/username/:player_username",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"username",
								":player_username"
							],
							"variable": [
								{
									"key": "player_username",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/username/<player_username> (Get player by username error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"Error: player not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8080/username/:player_username",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"username",
								":player_username"
							],
							"variable": [
								{
									"key": "player_username",
									"value": "tes"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/username/<player_username> (Get player by username with password hash)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.property(\"active\");",
									"    pm.expect(response.username).to.eql(\"test\");",
									"    pm.expect(response).to.have.property(\"wallet\");",
									"    pm.expect(response).to.have.property(\"uuid\");",
									"    pm.expect(response).to.have.property(\"password_hash\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8080/username/:player_username/all",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"username",
								":player_username",
								"all"
							],
							"variable": [
								{
									"key": "player_username",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/username/<player_username> (Get player by username with password hash error)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"Error: player not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8080/username/:player_username",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"username",
								":player_username"
							],
							"variable": [
								{
									"key": "player_username",
									"value": "tes"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/ (Create player)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.property(\"wallet\");",
									"    pm.expect(response.username).to.eql(\"nuovooooooo\");",
									"    pm.expect(response).to.have.property(\"wallet\");",
									"    pm.expect(response).to.have.property(\"uuid\");",
									"    pm.expect(response).to.have.property(\"password_hash\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nuovooooooo\",\n    \"password\": \"new pass\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8080/",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/ (Create player, already created)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.eql(\"Error: player already exists\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"nuovooooooo\",\n    \"password\": \"new pass\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8080/",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/<player_uuid>/wallet (modify player wallet)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.eql(\"wallet updated Successfully!\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8080/:player_uuid/wallet",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								":player_uuid",
								"wallet"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/<player_uuid>/wallet (modify player wallet invalid amount)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.eql(\"Invalid amount\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": \"aaa\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8080/:player_uuid/wallet",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								":player_uuid",
								"wallet"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/uuid/<player_uuid> (Delete player by uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"Player deleted\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8080/uuid/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"uuid",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Currency",
			"item": [
				{
					"name": "/currency/buy (Test Successful Purchase)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Transaction completed message', function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.response).to.eql('wallet updated Successfully!');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"purchase\": 200}"
						},
						"url": {
							"raw": "https://127.0.0.1:8088/currency/buy",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8088",
							"path": [
								"currency",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency/buy (Test invalid amount)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test('Transaction completed message', function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.response).to.eql('Invalid amount');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"purchase\": -50}"
						},
						"url": {
							"raw": "https://127.0.0.1:8088/currency/buy",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8088",
							"path": [
								"currency",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency/buy (Test missing data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test('Transaction completed message', function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.response).to.eql('Missing data');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8088/currency/buy",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8088",
							"path": [
								"currency",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency/buy (Test Missing Session Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test('Session cookie is missing', function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.response).to.eql(\"You're not logged\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"purchase\":  100}"
						},
						"url": {
							"raw": "https://127.0.0.1:8088/currency/buy",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8088",
							"path": [
								"currency",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency/buy (Test Invalid Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test('Invalid token message', function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.response).to.eql('Invalid token');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "invalid",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"purchase\": {\"item\": \"gold\", \"quantity\": 100}}"
						},
						"url": {
							"raw": "https://127.0.0.1:8088/currency/buy",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8088",
							"path": [
								"currency",
								"buy"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "GET /login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8081/login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin_login (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful login",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"",
									"// Verifica che i campi richiesti esistano",
									"pm.test(\"Response contains required fields\", function () {",
									"    pm.expect(response).to.have.property(\"access_token\");",
									"    pm.expect(response).to.have.property(\"expires_in\");",
									"    pm.expect(response).to.have.property(\"id_token\");",
									"    pm.expect(response).to.have.property(\"token_type\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}\n"
						},
						"url": {
							"raw": "https://127.0.0.1:8081/admin_login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"admin_login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin_login (Failed Invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"// Test for invalid credentials",
									"pm.test(\"Handles invalid credentials correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 400) {",
									"        pm.expect(jsonData.response).to.eql(\"Invalid credentials\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"a\",\n    \"password\": \"a\"\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8081/admin_login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"admin_login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin_login (Failed Invalid credentials)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"// Test for invalid credentials",
									"pm.test(\"Handles invalid credentials correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 400) {",
									"        pm.expect(jsonData.response).to.eql(\"Invalid credentials\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"a\"\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8081/admin_login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"admin_login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin_login (Failed Missing)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"// Test for invalid credentials",
									"pm.test(\"Handles Missing credentials correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 400) {",
									"        pm.expect(jsonData.response).to.eql(\"Missing data\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"admin\"\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8081/admin_login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"admin_login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /login (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful login",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"",
									"// Verifica che i campi richiesti esistano",
									"pm.test(\"Response contains required fields\", function () {",
									"    pm.expect(response).to.have.property(\"access_token\");",
									"    pm.expect(response).to.have.property(\"expires_in\");",
									"    pm.expect(response).to.have.property(\"id_token\");",
									"    pm.expect(response).to.have.property(\"token_type\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test\",\n    \"password\": \"test\"\n}\n"
						},
						"url": {
							"raw": "https://127.0.0.1:8081/login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /login (Failed Missing)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"// Test for invalid credentials",
									"pm.test(\"Handles invalid credentials correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 400) {",
									"        pm.expect(jsonData.response).to.eql(\"Missing credentials\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test\"\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8081/login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /login Failed (Invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"// Test for invalid credentials",
									"pm.test(\"Handles invalid credentials correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 401) {",
									"        pm.expect(jsonData.response).to.eql(\"Invalid credentials\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"a\",\n    \"password\": \"a\"\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8081/login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /login (Failed another player that deleted the account)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Handles invalid credentials correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 401) {",
									"        pm.expect(jsonData.response).to.eql(\"Account not found\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test2\",\n    \"password\": \"test\"\n}\n"
						},
						"url": {
							"raw": "https://127.0.0.1:8081/login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /logout ( logged out)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful logout",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// Test for already logged out",
									"pm.test(\"Handles logged out state\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.response).to.eql(\"Logout successful\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8081/logout",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /logout (Already logged out)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful logout",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"// Test for already logged out",
									"pm.test(\"Handles logged out state\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 401) {",
									"        pm.expect(jsonData.response).to.eql(\"You are not logged\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8081/logout",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8081",
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "GET /admin/login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8085/admin/login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/login (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful login",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const response = pm.response.json();",
									"",
									"// Verifica che i campi richiesti esistano",
									"pm.test(\"Response contains required fields\", function () {",
									"    const _response = response.response ",
									"    pm.expect(_response).to.have.property(\"access_token\");",
									"    pm.expect(_response).to.have.property(\"expires_in\");",
									"    pm.expect(_response).to.have.property(\"id_token\");",
									"    pm.expect(_response).to.have.property(\"token_type\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}\n"
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/login",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/users (Get all users)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/users",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/users/<user_uuid> (Get a specific user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.property(\"active\");",
									"    pm.expect(response).to.have.property(\"username\");",
									"    pm.expect(response).to.have.property(\"wallet\");",
									"    pm.expect(response.uuid).to.equal(\"71520f05-80c5-4cb1-b05a-a9642f9ae44d\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/users/<user_uuid> (Get a specific user does not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"Error: Player not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/users/<user_uuid> (Modify a specific user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"User updated Successfully!\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"new name\",\n    \"wallet\": 5\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae111"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/users/<user_uuid> (Modify a specific user not exist)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"Error: Player not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"new name\",\n    \"wallet\": 5\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae113"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/users/<user_uuid> (Eliminate a specific user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"Player deleted\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae111"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/users/<user_uuid> (Eliminate a specific user does not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"Error: Player not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae113"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admin/collection/<user_uuid> (Get user collection)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.an(\"array\")",
									"    pm.expect(response[0]).to.have.property(\"quantity\");",
									"    pm.expect(response[0]).to.have.property(\"gacha\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8085/admin/collection/:user_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"collection",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admin/collection/<user_uuid> (Get user collection, player do not exists))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"Error: Player not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8085/admin/collection/:user_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"collection",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/collection (Add a gacha) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response.description).to.equal(\"placeholder\");",
									"    pm.expect(response.image_path).to.equal(\"/assets/images/gachas/400.png\");",
									"    pm.expect(response.name).to.equal(\"placeholder\");",
									"    pm.expect(response).to.have.property(\"rarity\");",
									"    pm.expect(response).to.have.property(\"uuid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "refreshRequestParams",
									"value": [],
									"type": "any"
								},
								{
									"key": "tokenRequestParams",
									"value": [],
									"type": "any"
								},
								{
									"key": "authRequestParams",
									"value": [],
									"type": "any"
								},
								{
									"key": "tokenName",
									"value": "access_token",
									"type": "string"
								},
								{
									"key": "challengeAlgorithm",
									"value": "S256",
									"type": "string"
								},
								{
									"key": "username",
									"value": "test",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "password_credentials",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "body",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://ase.localhost/login",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_image",
									"type": "file",
									"src": "postman-cloud:///1efa80f2-a355-49d0-aad3-98f5270374ce"
								},
								{
									"key": "name",
									"value": "placeholder",
									"type": "text"
								},
								{
									"key": "description",
									"value": "placeholder",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "C",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/collection",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/collection (Gacha missing data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"Missing data\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "refreshRequestParams",
									"value": [],
									"type": "any"
								},
								{
									"key": "tokenRequestParams",
									"value": [],
									"type": "any"
								},
								{
									"key": "authRequestParams",
									"value": [],
									"type": "any"
								},
								{
									"key": "tokenName",
									"value": "access_token",
									"type": "string"
								},
								{
									"key": "challengeAlgorithm",
									"value": "S256",
									"type": "string"
								},
								{
									"key": "username",
									"value": "test",
									"type": "string"
								},
								{
									"key": "password",
									"value": "test",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "password_credentials",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "client_authentication",
									"value": "body",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://ase.localhost/login",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_image",
									"type": "file",
									"src": "postman-cloud:///1efa80f2-a355-49d0-aad3-98f5270374ce"
								},
								{
									"key": "description",
									"value": "placeholder",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "C",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/collection",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/collection/:gacha_uuid (Modify a existing gacha)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response.description).to.equal(\"modified_description\");",
									"    pm.expect(response.image_path).to.equal(\"/assets/images/gachas/400.png\");",
									"    pm.expect(response.name).to.equal(\"modified_name\");",
									"    pm.expect(response.rarity).to.equal(\"Common\");",
									"    pm.expect(response).to.have.property(\"uuid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_image",
									"type": "file",
									"src": "postman-cloud:///1efa80f2-a355-49d0-aad3-98f5270374ce"
								},
								{
									"key": "name",
									"value": "modified_name",
									"type": "text"
								},
								{
									"key": "description",
									"value": "modified_description",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "C",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/collection/:gacha_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "c685eae6-a473-4bca-a5c8-b710bb495ca6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/collection/:gacha_uuid (Modify a non existing gacha)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"Error: Gacha not found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_image",
									"type": "file",
									"src": "postman-cloud:///1efa80f2-a355-49d0-aad3-98f5270374ce"
								},
								{
									"key": "name",
									"value": "modified_name",
									"type": "text"
								},
								{
									"key": "description",
									"value": "modified_description",
									"type": "text"
								},
								{
									"key": "rarity",
									"value": "C",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/collection/:gacha_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "c685eae6-a473-4bca-a5c8-b710bb495ca7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admin/market (Get all Auction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes auction details\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.response).to.be.an(\"array\");",
									"",
									"    jsonData.response.forEach((item) => {",
									"        pm.expect(item).to.have.property(\"uuid\");",
									"        pm.expect(item).to.have.property(\"base_price\");",
									"        pm.expect(item).to.have.property(\"gacha\");",
									"        pm.expect(item).to.have.property(\"closed\");",
									"        pm.expect(item).to.have.property(\"uuid_player\");",
									"        pm.expect(item).to.have.property(\"expired_at\");",
									"",
									"        // Verifica proprietà specifiche all'interno di \"Gacha\"",
									"        pm.expect(item.gacha).to.have.property(\"name\");",
									"        pm.expect(item.gacha).to.have.property(\"description\");",
									"        pm.expect(item.gacha).to.have.property(\"rarity\");",
									"        pm.expect(item.gacha).to.have.property(\"uuid\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/market",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"market"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admin/market/<user_uuid> (Get specific Auction )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes auction details and display the right auction that i searched\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property(\"actual_offer\");",
									"    pm.expect(jsonData.response).to.have.property(\"base_price\");",
									"    pm.expect(jsonData.response).to.have.property(\"gacha\");",
									"    pm.expect(jsonData.response).to.have.property(\"closed\");",
									"    pm.expect(jsonData.response).to.have.property(\"uuid_player\");",
									"    pm.expect(jsonData.response).to.have.property(\"expired_at\");",
									"    pm.expect(jsonData.response).to.have.property(\"uuid\").to.be.eql(\"c502a9c4-6420-4d16-8183-8225576ade53\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/market/:auction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"market",
								":auction_uuid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "c502a9c4-6420-4d16-8183-8225576ade53"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admin/transactions/<user_uuid> (Get transaction for User Auction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes auction details and display the right auction that i searched\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.an(\"array\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/transaction/:user_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"transaction",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admin/close/<user_uuid> (Close an auction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"Auction closed\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/close/:auction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"close",
								":auction_uuid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "6c666fbf-747e-4ba5-9008-b74f0e3ae8ed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admin/close/<user_uuid> (Auction already closed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.equal(\"Auction is already closed\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/close/:auction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"close",
								":auction_uuid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "6c666fbf-747e-4ba5-9008-b74f0e3ae8ed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admin/payment/<user_uuid> (Admin force a payment for  an auction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Auction is closed and transaction is completed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property(\"Transaction completed\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/payment/:auction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"payment",
								":auction_uuid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "c502a9c4-6420-4d16-8183-8225576ade53"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admin/payment/<user_uuid> (Auction already closed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Auction is closed and transaction is completed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.eql(\"Auction is already closed\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8085/admin/payment/:auction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"payment",
								":auction_uuid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "c502a9c4-6420-4d16-8183-8225576ade53"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/collection/<gacha_uuid> (Eliminate a gacha)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.be.eql(\"Gacha deleted\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8085/admin/collection/:gacha_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8085",
							"path": [
								"admin",
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "a0f0f673-595d-445f-bbf5-be68217f5dab"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "/ (Get all transactions)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8087/",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8087",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/ (Create a transaction, ok)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.property(\"created_at\");",
									"    pm.expect(response).to.have.property(\"price\");",
									"    pm.expect(response).to.have.property(\"uuid\");",
									"    pm.expect(response).to.have.property(\"uuid_auction\");",
									"    pm.expect(response).to.have.property(\"uuid_player\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"uuid_player\": \"71520f05-80c5-4cb1-b05a-a9642f9ae44d\",\n    \"uuid_auction\": \"71520f05-80c5-4cb1-b05a-a9642f9aaaab\",\n    \"price\": 200\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8087/",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8087",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/ (Create a transactions fail, another transaction for that auction already exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response is a fail\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"Error: transaction already exists for this auction\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"uuid_player\": \"71520f05-80c5-4cb1-b05a-a9642f9ae44d\",\n    \"uuid_auction\": \"71520f05-80c5-4cb1-b05a-a9642f9aaaaa\",\n    \"price\": 200\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://127.0.0.1:8087/",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8087",
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/uuid/<transaction_uuid> (Get  transaction by UUID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.property(\"created_at\");",
									"    pm.expect(response).to.have.property(\"price\");",
									"    pm.expect(response.uuid).to.be.eql(\"186894c0-9dd3-4222-97a3-d8619135abad\");",
									"    pm.expect(response).to.have.property(\"uuid_auction\");",
									"    pm.expect(response).to.have.property(\"uuid_player\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8087/uuid/:transaction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8087",
							"path": [
								"uuid",
								":transaction_uuid"
							],
							"variable": [
								{
									"key": "transaction_uuid",
									"value": "186894c0-9dd3-4222-97a3-d8619135abad"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/uuid/<transaction_uuid> (Get  transaction by UUID, fails)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response is a fail\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"Error: transaction not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8087/uuid/:transaction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8087",
							"path": [
								"uuid",
								":transaction_uuid"
							],
							"variable": [
								{
									"key": "transaction_uuid",
									"value": "186894c0-9dd3-4222-97a3-d8619135abac"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<player_uuid> (Get  transaction by player)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is valid\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"response\");",
									"",
									"    pm.expect(jsonData.response).to.have.property(\"incoming transactions\");",
									"    pm.expect(jsonData.response).to.have.property(\"outgoing transactions\");",
									"",
									"    pm.expect(jsonData.response[\"incoming transactions\"]).to.be.an(\"array\");",
									"    pm.expect(jsonData.response[\"outgoing transactions\"]).to.be.an(\"array\");",
									"",
									"    pm.expect(jsonData.response[\"incoming transactions\"]).to.have.length(0);",
									"    pm.expect(jsonData.response[\"outgoing transactions\"]).to.have.length.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8087/user/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8087",
							"path": [
								"user",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "771520f0-80c5-4cb1-b05a-a9642f9ae11c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<player_uuid> (Get  all transactions by UUID invalid player)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response is a fail\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"Invalid player_uuid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8087/user/:player_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8087",
							"path": [
								"user",
								":player_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<player_uuid>/<transaction_uuid> (Get one transaction by UUID player)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verifica tutti i campi nella risposta\", function () {",
									"    let jsonResponse = pm.response.json();",
									"",
									"    // Controllo che la risposta contenga il campo 'response'",
									"    pm.expect(jsonResponse).to.have.property('response');",
									"",
									"    // Controllo dei singoli campi nella proprietà 'response'",
									"    let response = jsonResponse.response;",
									"    pm.expect(response).to.have.property(\"created_at\");",
									"    pm.expect(response).to.have.property(\"price\");",
									"    pm.expect(response.uuid).to.be.eql(\"e3c17850-37fa-4011-b43b-2ce1c441d281\");",
									"    pm.expect(response.uuid_player).to.have.eql(\"771520f0-80c5-4cb1-b05a-a9642f9ae11c\");",
									"    pm.expect(response).to.have.property(\"uuid_auction\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8087/user/:player_uuid/:transaction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8087",
							"path": [
								"user",
								":player_uuid",
								":transaction_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "771520f0-80c5-4cb1-b05a-a9642f9ae11c"
								},
								{
									"key": "transaction_uuid",
									"value": "e3c17850-37fa-4011-b43b-2ce1c441d281"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<player_uuid>/<transaction_uuid> (Get one transaction by UUID player, transaction not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response is a fail\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"Error: transaction not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8087/user/:player_uuid/:transaction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8087",
							"path": [
								"user",
								":player_uuid",
								":transaction_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "771520f0-80c5-4cb1-b05a-a9642f9ae11c"
								},
								{
									"key": "transaction_uuid",
									"value": "e3c17850-37fa-4011-b43b-2ce1c441d277"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/<player_uuid>/<transaction_uuid> (Get one transaction by UUID player, player not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response is a fail\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"Error: transaction not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8087/user/:player_uuid/:transaction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8087",
							"path": [
								"user",
								":player_uuid",
								":transaction_uuid"
							],
							"variable": [
								{
									"key": "player_uuid",
									"value": "771520f0-80c5-4cb1-b05a-a9642f9ae11a"
								},
								{
									"key": "transaction_uuid",
									"value": "e3c17850-37fa-4011-b43b-2ce1c441d281"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Market",
			"item": [
				{
					"name": "GET /market/gacha/<gacha_uuid> (html page)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8086//market/gacha/:gacha_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"",
								"market",
								"gacha",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "09907f76-9b0f-4270-84a3-e9780b164ac4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /market (Auction list)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Auctions array is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.an(\"array\");",
									"    if (jsonData.response.length > 0) {",
									"        pm.expect(jsonData.response[0]).to.have.property(\"Gacha\");",
									"        pm.expect(jsonData.response[0]).to.have.property(\"auction_uuid\");",
									"        pm.expect(jsonData.response[0]).to.have.property(\"base_price\");",
									"        pm.expect(jsonData.response[0]).to.have.property(\"closed\");",
									"        pm.expect(jsonData.response[0]).to.have.property(\"expired_at\");",
									"        pm.expect(jsonData.response[0]).to.have.property(\"Player\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://127.0.0.1:8086/market",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /market/:auction_uuid (Auction single)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Auction is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"        pm.expect(jsonData.response).to.have.property(\"Gacha\");",
									"        pm.expect(jsonData.response.auction_uuid).to.be.eql(\"71520f05-80c5-4cb1-b05a-a9642f9aaaaa\");",
									"        pm.expect(jsonData.response).to.have.property(\"base_price\");",
									"        pm.expect(jsonData.response).to.have.property(\"closed\");",
									"        pm.expect(jsonData.response).to.have.property(\"expired_at\");",
									"        pm.expect(jsonData.response).to.have.property(\"Player\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://127.0.0.1:8086/market/:auction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market",
								":auction_uuid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9aaaaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /market/:auction_uuid (Auction single not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is a fail\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"Error: auction not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://127.0.0.1:8086/market/:auction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market",
								":auction_uuid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9aaaab"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market (create an auction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response includes auction details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property(\"uuid\");",
									"    pm.expect(jsonData.response).to.have.property(\"base_price\");",
									"    pm.expect(jsonData.response).to.have.property(\"gacha_uuid\");",
									"    pm.expect(jsonData.response).to.have.property(\"user_uuid\");",
									"    pm.expect(jsonData.response).to.have.property(\"expired_at\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_uuid\": \"09907f76-9b0f-4270-84a3-e9780b164ac4\",\n  \"starting_price\": 100\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8086/market",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market (just auctioned that gacha)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is a fail\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"You have only 2 copies of gacha name1\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_uuid\": \"09907f76-9b0f-4270-84a3-e9780b164ac4\",\n  \"starting_price\": 100\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8086/market",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market (finished player try to  auction a gacha that doesn't have)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is a fail\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"You don't have this gacha\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_uuid\": \"09907f76-9b0f-4270-84a3-e9780b164ac4\",\n  \"starting_price\": 100\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8086/market",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/<auction_uuid>/bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms bid details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response.auction_uuid).to.be.eql(\"71520f05-80c5-4cb1-b05a-a9642f9ccccc\");",
									"    pm.expect(jsonData.response).to.have.property(\"player_uuid\");",
									"    pm.expect(jsonData.response).to.have.property(\"offer\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offer\": 300\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8086/market/:auction_uuid/bid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market",
								":auction_uuid",
								"bid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ccccc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/<auction_uuid>/bid (offer not higher)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is a fail\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"Offer must be higher than base price\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offer\": 100\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8086/market/:auction_uuid/bid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market",
								":auction_uuid",
								"bid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ccccc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/<auction_uuid>/bid (owner of auction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response is a fail\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"You're the owner of this auction\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offer\": 100\n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8086/market/:auction_uuid/bid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market",
								":auction_uuid",
								"bid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ccccc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/<auction_uuid>/close",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Auction is already closed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.equal(\"Auction closed\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8086/market/:auction_uuid/close",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market",
								":auction_uuid",
								"close"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9bbbbb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/<auction_uuid>/payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Auction is closed and transaction is completed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.equal(\"Transaction completed\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8086/market/:auction_uuid/payment",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market",
								":auction_uuid",
								"payment"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ccccc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/<auction_uuid>/payment (transaction for that auction already exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Auction is closed and transaction is completed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.equal(\"Failed to create transaction\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_admin}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8086/market/:auction_uuid/payment",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8086",
							"path": [
								"market",
								":auction_uuid",
								"payment"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9aaaaa"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "GET /user (Signup Page)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://127.0.0.1:8083/user",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user"
							]
						},
						"description": "Returns the signup page."
					},
					"response": []
				},
				{
					"name": "POST /user (Create User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.an(\"object\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"neww\", \"password\": \"password123\"}"
						},
						"url": {
							"raw": "https://127.0.0.1:8083/user",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user"
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "POST /user (Update my User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"User updated Successfully!\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"new_test\"}"
						},
						"url": {
							"raw": "https://127.0.0.1:8083/user",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user"
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "POST /user (Update my User, Missing data))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"Missing data\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n}"
						},
						"url": {
							"raw": "https://127.0.0.1:8083/user",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user"
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "POST /user (Create User that still exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(\"Error: player already exists\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"neww\", \"password\": \"password123\"}"
						},
						"url": {
							"raw": "https://127.0.0.1:8083/user",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user"
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "POST /user/collection (See my collection)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8083/user/collection",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user",
								"collection"
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "POST /user/currency (See my currency)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.a(\"number\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8083/user/currency",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user",
								"currency"
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "POST /user/transactions (See my transactions)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8083/user/transactions",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user",
								"transactions"
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "POST /user/transactions/<transaction_uuid> (See specific transaction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    const resp = response.response",
									"    pm.expect(resp).to.have.property(\"created_at\");",
									"    pm.expect(resp).to.have.property(\"price\");",
									"    pm.expect(resp).to.have.property(\"uuid_auction\");",
									"    pm.expect(resp.uuid).to.be.eql(\"e3c17850-37fa-4011-b43b-2ce1c441d273\");",
									"    pm.expect(resp).to.have.property(\"uuid_player\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8083/user/transactions/:transaction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user",
								"transactions",
								":transaction_uuid"
							],
							"variable": [
								{
									"key": "transaction_uuid",
									"value": "e3c17850-37fa-4011-b43b-2ce1c441d273"
								}
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "POST /user/transactions/<transaction_uuid> (invalid uuid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    const resp = response.response",
									"    pm.expect(resp).to.be.eql(\"Invalid transaction_uuid\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8083/user/transactions/:transaction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user",
								"transactions",
								":transaction_uuid"
							],
							"variable": [
								{
									"key": "transaction_uuid",
									"value": "e3c17850-37fa-4011-b43b-2ce1c441d2"
								}
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "POST /user/transactions/<transaction_uuid> (invalid transaction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    const resp = response.response",
									"    pm.expect(resp).to.be.eql(\"Error: transaction not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://127.0.0.1:8083/user/transactions/:transaction_uuid",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user",
								"transactions",
								":transaction_uuid"
							],
							"variable": [
								{
									"key": "transaction_uuid",
									"value": "e3c17850-37fa-4011-b43b-2ce1c441d275"
								}
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "GET /userinfo (Userinfo endpoint)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is valid\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"response\");",
									"",
									"    pm.expect(jsonData.response).to.have.property(\"username\");",
									"    pm.expect(jsonData.response).to.have.property(\"uuid\");",
									"    pm.expect(jsonData.response).to.have.property(\"wallet\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://127.0.0.1:8083/userinfo",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"userinfo"
							]
						},
						"description": "Returns the user's collection."
					},
					"response": []
				},
				{
					"name": "GET /user (Eliminate user test, fail active auction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Handles logout successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.response).to.eql(\"You have an active auction\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token_test}}",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://127.0.0.1:8083/user",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user"
							]
						},
						"description": "Returns the user's wallet balance."
					},
					"response": []
				},
				{
					"name": "GET /user (Eliminate user test)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Handles logout successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.response).to.eql(\"Player deleted\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "tokenType",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessToken",
									"value": "{{mock_oauth2_token}}",
									"type": "string"
								},
								{
									"key": "headerPrefix",
									"value": "Bearer",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://127.0.0.1:8083/user",
							"protocol": "https",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8083",
							"path": [
								"user"
							]
						},
						"description": "Returns the user's wallet balance."
					},
					"response": []
				}
			]
		}
	]
}