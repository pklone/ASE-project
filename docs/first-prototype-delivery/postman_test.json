{
	"info": {
		"_postman_id": "716edf12-6271-4592-bc2e-1199ef58ebef",
		"name": "ASE API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39769890"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "GET /login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/login",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /admin/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/admin/login",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/login (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful login",
									"let token = pm.cookies.get('session');",
									"",
									"// Salva il token come variabile di ambiente in Postman",
									"pm.globals.set(\"jwt_token_admin\", token);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.eql(\"Logged as admin\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}\n"
						},
						"url": {
							"raw": "https://ase.localhost/admin/login",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/login (Failed Invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"// Test for invalid credentials",
									"pm.test(\"Handles invalid credentials correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 401) {",
									"        pm.expect(jsonData.response).to.eql(\"Invalid credentials\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"a\",\n    \"password\": \"a\"\n}"
						},
						"url": {
							"raw": "https://ase.localhost/admin/login",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /admin/login (Failed Missing)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"// Test for invalid credentials",
									"pm.test(\"Handles Missing credentials correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 400) {",
									"        pm.expect(jsonData.response).to.eql(\"Missing credentials\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"admin\"\n}"
						},
						"url": {
							"raw": "https://ase.localhost/admin/login",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /login (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful login",
									"let token = pm.cookies.get('session');",
									"",
									"// Salva il token come variabile di ambiente in Postman",
									"pm.globals.set(\"jwt_token_player\", token);",
									"// Test for successful login",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.eql(\"Login successful\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test\",\n    \"password\": \"test\"\n}\n"
						},
						"url": {
							"raw": "https://ase.localhost/login",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /login (Failed Missing)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"// Test for invalid credentials",
									"pm.test(\"Handles invalid credentials correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 400) {",
									"        pm.expect(jsonData.response).to.eql(\"Missing credentials\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test\"\n}"
						},
						"url": {
							"raw": "https://ase.localhost/login",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /login Failed (Invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"// Test for invalid credentials",
									"pm.test(\"Handles invalid credentials correctly\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 401) {",
									"        pm.expect(jsonData.response).to.eql(\"Invalid credentials\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"a\",\n    \"password\": \"a\"\n}"
						},
						"url": {
							"raw": "https://ase.localhost/login",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /logout (Already logged)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful logout",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// Test for already logged out",
									"pm.test(\"Handles already logged out state\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.response).to.eql(\"Already logged out\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/logout",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /logout (Success)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful logout",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// Test for already logged out",
									"pm.test(\"Handles logout successful\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (pm.response.code === 200) {",
									"        pm.expect(jsonData.response).to.eql(\"Logout successful\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiYWRtaW4iOnRydWUsImV4cCI6MTczMTg0ODA3Mn0.GFDT2XWanXfSjrkwzvTLUZ4_dMNxCf6aQBq80T8J0B0';",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/logout",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Collection",
			"item": [
				{
					"name": "/collection (Get all collections)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"array\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "ase.localhost/collection",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/:gacha_uuid (Get collection by UUID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains the gacha with that UUID \", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"    pm.expect(response[1]).to.be.a('string');",
									"    pm.expect(response[1]).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/); // Validate UUID format",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "ase.localhost/collection/:gacha_uuid",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "4e120c8c-d5c0-43f6-8587-0a8b94473593"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/collection/user/:player_id (Get collections by player ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "ase.localhost/collection/user/:player_id",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"collection",
								"user",
								":player_id"
							],
							"variable": [
								{
									"key": "player_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/roll (Successful roll with valid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// Parse the response body",
									"const responseBody = pm.response.json();",
									"",
									"// Check if the response contains the \"response\" key",
									"pm.test(\"Response contains 'response' key\", function () {",
									"    pm.expect(responseBody).to.have.property(\"response\");",
									"});",
									"",
									"// Check if the \"response\" object has exactly 5 fields",
									"pm.test(\"Response object contains 5 fields\", function () {",
									"    pm.expect(Object.keys(responseBody.response)).to.have.lengthOf(5);",
									"});",
									"",
									"// Optionally, you can check the names of the fields if necessary",
									"pm.test(\"Response object contains the expected fields\", function () {",
									"    const expectedFields = [\"description\", \"image_path\", \"name\", \"rarity\", \"uuid\"];",
									"    pm.expect(Object.keys(responseBody.response)).to.deep.equal(expectedFields);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "ase.localhost/roll",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "/roll (Roll without being logged in)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is not logged\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"You're not logged\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": ""
							}
						],
						"url": {
							"raw": "ase.localhost/roll",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "/roll (Roll with an invalid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Invalid token response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"Invalid token\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "session=invalid.jwt.token"
							}
						],
						"url": {
							"raw": "ase.localhost/roll",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency/buy (Test Successful Purchase to restore the roll))",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Transaction completed message', function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.response).to.eql('wallet updated Successfully!');",
									"});",
									"try {",
									"    const response = await pm.sendRequest({",
									"        url: \"https://ase.localhost/user/currency\",",
									"        method: \"GET\",",
									"        header: {",
									"            Accept: \"application/json\"",
									"        }",
									"    });",
									"    var responseBody = response.json();",
									"pm.test(\"Data modified correctly\", function () {",
									"    pm.expect(responseBody.response).to.eql(1000);",
									"});",
									"",
									"} catch (err) {",
									"    console.error(err);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"purchase\": 10}"
						},
						"url": {
							"raw": "https://ase.localhost/currency/buy",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"currency",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/collection (Player try to adds new gacha)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Response is 'You are not autorized'\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"You are not autorized\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"New Gacha\",\"description\": \"New Gacha Item Description\",\"image_path\": \"/path/to/image.png\",\"id_rarity\": 2}"
						},
						"url": {
							"raw": "ase.localhost/admin/collection",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/collection (Admin adds new gacha Copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is 'Gacha added'\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"Gacha added\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_admin\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 3600*1000);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: false",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_image",
									"type": "file",
									"src": "postman-cloud:///1efa80f2-a355-49d0-aad3-98f5270374ce"
								},
								{
									"key": "name",
									"value": "placeholder",
									"type": "text"
								},
								{
									"key": "description",
									"value": "placeholder",
									"type": "text"
								},
								{
									"key": "new_rarity",
									"value": "C",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "ase.localhost/admin/collection",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/collection/:gacha_uuid (Player try to modifies existing gacha)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Response is 'You are not autorized'\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"You are not autorized\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Updated Gacha\",\"description\": \"Updated Gacha Item Description\",\"image_path\": \"/path/to/updated_image.png\",\"id_rarity\": 3}"
						},
						"url": {
							"raw": "ase.localhost/admin/collection/:gacha_uuid",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/admin/collection/:gacha_uuid (Admin modifies existing gacha Copy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is 'Gacha updated'\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"Gacha updated\");",
									"});",
									"try {",
									"    const response = await pm.sendRequest({",
									"        url: \"https://ase.localhost/collection/4e120c8c-d5c0-43f6-8587-0a8b94473593\",",
									"        method: \"GET\"",
									"    });",
									"    var responseBody = response.json();",
									"pm.test(\"Verifica che i dati siano stati modificati\", function () {",
									"    pm.expect(responseBody[0]).to.eql(1);",
									"    pm.expect(responseBody[2]).to.eql(\"modified_name\");",
									"    pm.expect(responseBody[3]).to.eql(\"modified_description\");",
									"});",
									"",
									"} catch (err) {",
									"    console.error(err);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_admin\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gacha_image",
									"type": "file",
									"src": "postman-cloud:///1efa80f2-a355-49d0-aad3-98f5270374ce"
								},
								{
									"key": "name",
									"value": "modified_name",
									"type": "text"
								},
								{
									"key": "description",
									"value": "modified_description",
									"type": "text"
								},
								{
									"key": "new_rarity",
									"value": "C",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "ase.localhost/admin/collection/:gacha_uuid",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"collection",
								":gacha_uuid"
							],
							"variable": [
								{
									"key": "gacha_uuid",
									"value": "4e120c8c-d5c0-43f6-8587-0a8b94473593"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "GET /user (Signup Page)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is HTML\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/user",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"user"
							]
						},
						"description": "Returns the signup page."
					},
					"response": []
				},
				{
					"name": "GET /admin/users (Get All Users)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_admin\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/admin/users",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"users"
							]
						},
						"description": "Returns a list of users, requires an admin token."
					},
					"response": []
				},
				{
					"name": "GET /admin/users (Player tries to get All Users)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"You are not autorized\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/admin/users",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"users"
							]
						},
						"description": "Returns a list of users, requires an admin token."
					},
					"response": []
				},
				{
					"name": "GET /admin/users/<user_uuid> (Get Specific User by UUID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_admin\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"UUID is present and valid\", function () {",
									"    // Estrai la risposta JSON",
									"    const responseJson = pm.response.json();",
									"    ",
									"    // Verifica che la chiave \"response\" esista e che l'UUID sia una stringa valida",
									"    pm.expect(responseJson).to.have.property('response');",
									"    pm.expect(responseJson.response).to.have.property('uuid').that.is.a('string');",
									"    ",
									"    // Aggiungi una verifica sul formato dell'UUID (ad esempio, un UUID standard)",
									"    const uuidPattern = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;",
									"    pm.expect(responseJson.response.uuid).to.match(uuidPattern);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						},
						"description": "Returns details of a specific user, requires an admin token."
					},
					"response": []
				},
				{
					"name": "GET /admin/users/<user_uuid> (Player tries to get Specific User by UUID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"UUID is present and valid\", function () {",
									"    // Estrai la risposta JSON",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"You are not autorized\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						},
						"description": "Returns details of a specific user, requires an admin token."
					},
					"response": []
				},
				{
					"name": "POST /user (Create User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array of the new User\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.an(\"array\");",
									"});",
									"var response = pm.response.json();",
									"",
									"// Extract the second parameter (UUID)",
									"var uuid = response.response[1];",
									"pm.globals.set(\"new_player_uuid\", uuid)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"testuser\", \"password\": \"password123\"}"
						},
						"url": {
							"raw": "https://ase.localhost/user",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"user"
							]
						},
						"description": "Creates a new user."
					},
					"response": []
				},
				{
					"name": "PUT /admin/users/<user_uuid> (Modify the new User)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_admin\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is 'User updated'\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"User updated Successfully!\");",
									"});",
									"try {",
									"    const uuid = pm.globals.get(\"new_player_uuid\");",
									"    const response = await pm.sendRequest({",
									"        url: 'https://ase.localhost/admin/users/'+ uuid,",
									"        method: \"GET\"",
									"    });",
									"    var responseBody = response.json();",
									"pm.test(\"Verifica che i dati siano stati modificati\", function () {",
									"    pm.expect(responseBody.response).to.have.property('username').that.equals(\"new_name\");",
									"    pm.expect(responseBody.response).to.have.property('wallet').that.equals(1000);",
									"});",
									"",
									"",
									"} catch (err) {",
									"    console.error(err);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"new_name\", \"wallet\": 1000}"
						},
						"url": {
							"raw": "https://ase.localhost/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "{{new_player_uuid}}"
								}
							]
						},
						"description": "Modifies the details of a user."
					},
					"response": []
				},
				{
					"name": "GET /user/collection (Get User's Collection)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/user/collection",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"user",
								"collection"
							]
						},
						"description": "Returns the user's collection."
					},
					"response": []
				},
				{
					"name": "GET /user/currency (Get User's Currency)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is current wallet\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(1000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://ase.localhost/user/currency",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"user",
								"currency"
							]
						},
						"description": "Returns the user's wallet balance."
					},
					"response": []
				},
				{
					"name": "GET /user/transactions (Get All Transactions for User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is valid\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"response\");",
									"",
									"    pm.expect(jsonData.response).to.have.property(\"incoming transactions\");",
									"    pm.expect(jsonData.response).to.have.property(\"outgoing transactions\");",
									"",
									"    pm.expect(jsonData.response[\"incoming transactions\"]).to.be.an(\"array\");",
									"    pm.expect(jsonData.response[\"outgoing transactions\"]).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/user/transactions",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"user",
								"transactions"
							]
						},
						"description": "Returns a list of all transactions for the user."
					},
					"response": []
				},
				{
					"name": "GET /user/transactions/<transaction_uuid> (Get Specific Transaction)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is null\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.be.eql(null);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/user/transactions/:transaction_uuid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"user",
								"transactions",
								":transaction_uuid"
							],
							"variable": [
								{
									"key": "transaction_uuid",
									"value": ""
								}
							]
						},
						"description": "Returns details of a specific transaction for the user."
					},
					"response": []
				}
			]
		},
		{
			"name": "Market",
			"item": [
				{
					"name": "GET /market (Auction list)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Auctions array is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.be.an(\"array\");",
									"    if (jsonData.response.length > 0) {",
									"        pm.expect(jsonData.response[0]).to.have.property(\"Gacha\");",
									"        pm.expect(jsonData.response[0]).to.have.property(\"auction_uuid\");",
									"        pm.expect(jsonData.response[0]).to.have.property(\"base_price\");",
									"        pm.expect(jsonData.response[0]).to.have.property(\"closed\");",
									"        pm.expect(jsonData.response[0]).to.have.property(\"expired_at\");",
									"        pm.expect(jsonData.response[0]).to.have.property(\"player_username\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://ase.localhost/market",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"market"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /market/:auction_uuid (Auction single)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Auctions array is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.response.length > 0) {",
									"        pm.expect(jsonData.response).to.have.property(\"Gacha\");",
									"        pm.expect(jsonData.response).to.have.property(\"auction_uuid\");",
									"        pm.expect(jsonData.response).to.have.property(\"base_price\");",
									"        pm.expect(jsonData.response).to.have.property(\"closed\");",
									"        pm.expect(jsonData.response).to.have.property(\"expired_at\");",
									"        pm.expect(jsonData.response).to.have.property(\"player_username\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://ase.localhost/market/:auction_uuid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"market",
								":auction_uuid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9aaaaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes auction details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property(\"uuid\");",
									"    pm.expect(jsonData.response).to.have.property(\"base_price\");",
									"    pm.expect(jsonData.response).to.have.property(\"gacha_uuid\");",
									"    pm.expect(jsonData.response).to.have.property(\"id\");",
									"    pm.expect(jsonData.response).to.have.property(\"user_uuid\");",
									"    pm.expect(jsonData.response).to.have.property(\"expired_at\");",
									"});",
									"const response = pm.response.json()",
									"const uuid = response.response.uuid;",
									"pm.globals.set(\"new-auction\", uuid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"gacha_uuid\": \"09907f76-9b0f-4270-84a3-e9780b164ac4\",\n  \"starting_price\": 100\n}"
						},
						"url": {
							"raw": "https://ase.localhost/market",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"market"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /login (Success another player to make bid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful login",
									"let token = pm.cookies.get('session');",
									"",
									"// Salva il token come variabile di ambiente in Postman",
									"pm.globals.set(\"jwt_token_player_bid\", token);",
									"// Test for successful login",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response contains success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.eql(\"Login successful\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"test2\",\n    \"password\": \"test\"\n}\n"
						},
						"url": {
							"raw": "https://ase.localhost/login",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/<auction_uuid>/bid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms bid details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.have.property(\"auction_uuid\");",
									"    pm.expect(jsonData.response).to.have.property(\"player_uuid\");",
									"    pm.expect(jsonData.response).to.have.property(\"offer\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player_bid\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player_bid}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offer\": 200\n}"
						},
						"url": {
							"raw": "https://ase.localhost/market/:auction_uuid/bid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"market",
								":auction_uuid",
								"bid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "{{new-auction}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/<auction_uuid>/bid (bid is not higher than current price)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms bid details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.eql(\"Offer must be higher than base price\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player_bid\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player_bid}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offer\": 100\n}"
						},
						"url": {
							"raw": "https://ase.localhost/market/:auction_uuid/bid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"market",
								":auction_uuid",
								"bid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "{{new-auction}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /market/<auction_uuid>/bid (Owner bid his own auction)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response confirms bid details\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.eql(\"You're the owner of this auction\")",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_player_bid}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"offer\": 200\n}"
						},
						"url": {
							"raw": "https://ase.localhost/market/:auction_uuid/bid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"market",
								":auction_uuid",
								"bid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "{{new-auction}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /admin/users/<user_uuid> (Modify the User currency)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_admin\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is 'User updated'\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"User updated Successfully!\");",
									"});",
									"try {",
									"    const uuid = pm.globals.get(\"new_player_uuid\");",
									"    const response = await pm.sendRequest({",
									"        url: 'https://ase.localhost/admin/users/'+ uuid,",
									"        method: \"GET\"",
									"    });",
									"    var responseBody = response.json();",
									"pm.test(\"Verifica che i dati siano stati modificati\", function () {",
									"    pm.expect(responseBody.response).to.have.property('username').that.equals(\"new_name\");",
									"    pm.expect(responseBody.response).to.have.property('wallet').that.equals(1000);",
									"});",
									"",
									"",
									"} catch (err) {",
									"    console.error(err);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"null\", \"wallet\": 1000}"
						},
						"url": {
							"raw": "https://ase.localhost/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						},
						"description": "Modifies the details of a user."
					},
					"response": []
				},
				{
					"name": "POST /admin/close/<auction_uuid>",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Auction is closed\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.response).to.equal(\"Auction closed\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_admin\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://ase.localhost/admin/close/:auction_uuid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"close",
								":auction_uuid"
							],
							"variable": [
								{
									"key": "auction_uuid",
									"value": "{{new-auction}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Currency",
			"item": [
				{
					"name": "/currency/buy (Test Missing Session Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test('Session cookie is missing', function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.response).to.eql(\"You're not logged\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const jar = pm.cookies.jar();",
									"",
									"jar.clear(pm.request.url, function (error) {",
									"  // error - <Error>",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"purchase\":  100}"
						},
						"url": {
							"raw": "https://ase.localhost/currency/buy",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"currency",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency/buy (Test Expired Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test('Expired token message', function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.response).to.eql('Expired token');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1dWlkIjoiNzE1MjBmMDUtODBjNS00Y2IxLWIwNWEtYTk2NDJmOWFlNDRkIiwiZXhwIjoxNzMxOTM0OTc0fQ.s1ajDk3JUdBLxFgTWsxzWJ28uj7WdtqlRGRjmYocu6k\";",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1dWlkIjoiNzE1MjBmMDUtODBjNS00Y2IxLWIwNWEtYTk2NDJmOWFlNDRkIiwiZXhwIjoxNzMxOTM0OTc0fQ.s1ajDk3JUdBLxFgTWsxzWJ28uj7WdtqlRGRjmYocu6k",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"purchase\": {\"item\": \"gold\", \"quantity\": 100}}"
						},
						"url": {
							"raw": "https://ase.localhost/currency/buy",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"currency",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency/buy (Test Invalid Token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test('Invalid token message', function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.response).to.eql('Invalid token');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = \"invalid\";",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "invalid",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"purchase\": {\"item\": \"gold\", \"quantity\": 100}}"
						},
						"url": {
							"raw": "https://ase.localhost/currency/buy",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"currency",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency/buy (Test Successful Purchase)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test('Transaction completed message', function () {",
									"    var jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.response).to.eql('wallet updated Successfully!');",
									"});",
									"try {",
									"    const response = await pm.sendRequest({",
									"        url: \"https://ase.localhost/user/currency\",",
									"        method: \"GET\",",
									"        header: {",
									"            Accept: \"application/json\"",
									"        }",
									"    });",
									"    var responseBody = response.json();",
									"pm.test(\"Data modified correctly\", function () {",
									"    pm.expect(responseBody.response).to.eql(1200);",
									"});",
									"",
									"} catch (err) {",
									"    console.error(err);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_player\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"purchase\": 200}"
						},
						"url": {
							"raw": "https://ase.localhost/currency/buy",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"currency",
								"buy"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /admin/users/<user_uuid> (Modify the User currency))",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create a cookie jar instance",
									"const jar = pm.cookies.jar();",
									"",
									"// Define the cookie details",
									"const url = 'https://ase.localhost';",
									"const cookieName = 'session';",
									"const cookieValue = pm.globals.get(\"jwt_token_admin\");",
									"const expirationDate = new Date();",
									"expirationDate.setTime(expirationDate.getTime() + 50);",
									"",
									"// Set the cookie in the jar",
									"jar.set(",
									"    url,",
									"    cookieName,",
									"    cookieValue,",
									"    {",
									"        domain: 'ase.localhost',",
									"        path: '/',",
									"        expires: expirationDate.toUTCString(),",
									"        httpOnly: true,",
									"        secure: true",
									"    },",
									"    function (error) {",
									"        if (error) {",
									"            console.error('Error setting cookie:', error);",
									"        } else {",
									"            console.log('Cookie set successfully');",
									"        }",
									"    }",
									");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is 'User updated'\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.response).to.eql(\"User updated Successfully!\");",
									"});",
									"try {",
									"    const uuid = pm.globals.get(\"new_player_uuid\");",
									"    const response = await pm.sendRequest({",
									"        url: 'https://ase.localhost/admin/users/'+ uuid,",
									"        method: \"GET\"",
									"    });",
									"    var responseBody = response.json();",
									"pm.test(\"Verifica che i dati siano stati modificati\", function () {",
									"    pm.expect(responseBody.response).to.have.property('username').that.equals(\"new_name\");",
									"    pm.expect(responseBody.response).to.have.property('wallet').that.equals(1000);",
									"});",
									"",
									"",
									"} catch (err) {",
									"    console.error(err);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_admin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"null\", \"wallet\": 1000}"
						},
						"url": {
							"raw": "https://ase.localhost/admin/users/:user_uuid",
							"protocol": "https",
							"host": [
								"ase",
								"localhost"
							],
							"path": [
								"admin",
								"users",
								":user_uuid"
							],
							"variable": [
								{
									"key": "user_uuid",
									"value": "71520f05-80c5-4cb1-b05a-a9642f9ae44d"
								}
							]
						},
						"description": "Modifies the details of a user."
					},
					"response": []
				}
			]
		}
	]
}